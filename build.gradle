buildscript {
  dependencies {
    classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1"
  }
}

plugins {
  id 'org.springframework.boot' version '2.6.6'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'jacoco'
}

group = 'RewardsCentral '
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'



repositories {
  mavenCentral()
  flatDir {
    dirs 'libs'
  }
}

ext {
  set('springCloudVersion', "2021.0.1")
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation group: 'org.javamoney', name: 'moneta', version: '1.3'
  implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
  //SPRING CLOUD CONFIG
  implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  implementation('org.springframework.boot:spring-boot-starter-jdbc')
  runtimeOnly('com.h2database:h2')
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  implementation name: 'gpsUtil'

}

// docker: plugin apply
apply plugin: 'com.palantir.docker'

// docker: new task docker
docker {
  dependsOn build
  name "${project.name}"
  files bootJar.archivePath
  buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  reports {
    xml.required = true
    html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it,
        exclude: ['**/dto/**',
                  '**/entity/**',
                  '**/entity.trip/**',
                  '**/tracker/**',
                  '**/helper/**',
                  '**/exception/**',
                  '**/controller/**'

        ]
      )
    }))
  }
}
jacoco {
  toolVersion = "0.8.8"
}


